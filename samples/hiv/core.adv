class Program extends Object:
    method main()

    method 'builtin:push_char'(c)
    method 'builtin:pop_char'()

    method 'builtin:write'()
    method 'builtin:read'()
end

class Boolean extends Object:
    method not()
    
    method and(b)
    
    method or(b)
end

class True extends Boolean:
    method not():
        return False
    end
    
    method and(b):
        return b
    end
    
    method or(b):
        return True
    end
end

class False extends Boolean:
    method not():
        return True
    end
    
    method and(b):
        return False
    end
    
    method or(b):
        return b
    end
end

class NumberImplementation extends Object:
    method zero()
    method fromString(s)
end

class Number extends Object:
    method ++()
    
    method --()
    
    method isZero()
    
    method toString()

    # If the number implementation has no internal state which can be changed via '++Disc' or '--Disc' methods it can just return 'this'
    method clone()

    # Methods '++Disc' and '--Disc' serve the same purpose as '++' and '--', but *might* mutate the object
    # As you can not be sure if they will or will not mutate the original object, the object should be discarded after the use of these methods
    # You might also want to use the 'clone' method before using these
    # By default they redirect to '++' and '--' methods, but if an implementation can give faster results when mutating the original object these should be overriden
    method ++Disc():
        return this.++()
    end

    method --Disc():
        return this.--()
    end
    
    method +(n):
        result = this.clone()
        n = n.clone()

        while n.isZero().not():
            result = result.++Disc()
            n = n.--Disc()
        end
        return result
    end
    
    method -(n):
        result = this.clone()
        n = n.clone()

        while n.isZero().not():
            result = result.--Disc()
            n = n.--Disc()
        end
        return result
    end
    
    method *(n):
        result = this.-(this)
        while n.isZero().not():
            result = result.+(this)
            n = n.--()
        end
        return result
    end
    
    method /(n):
        result = this.-(this)
        a = this
        while a.isZero().not():
            a = a.-(n)
            result = result.++()
        end
        return result
    end
    
    method equals(n):
        if n.isZero():
            if this.isZero():
                return True
            end
            return False
        end
        if this.isZero():
            return False
        end
        return this.--().equals(n.--())
    end
    
    method greaterThan(n):
        if n.isZero():
            if this.isZero():
                return False
            end
            return True
        end
        if this.isZero():
            return False
        end
        return this.--().greaterThan(n.--())
    end
    
    method lesserThan(n):
        if n.isZero():
            if this.isZero():
                return False
            end
            return False
        end
        if this.isZero():
            return True
        end
        return this.--().lesserThan(n.--())
    end
end
